// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: book_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookService_CreateNewAuthor_FullMethodName = "/book.pb.BookService/CreateNewAuthor"
	BookService_CreateNewBook_FullMethodName   = "/book.pb.BookService/CreateNewBook"
	BookService_UploadImage_FullMethodName     = "/book.pb.BookService/UploadImage"
	BookService_SearchBook_FullMethodName      = "/book.pb.BookService/SearchBook"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	CreateNewAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorResponse, error)
	CreateNewBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (BookService_UploadImageClient, error)
	SearchBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (BookService_SearchBookClient, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateNewAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, BookService_CreateNewAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateNewBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_CreateNewBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (BookService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], BookService_UploadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceUploadImageClient{stream}
	return x, nil
}

type BookService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type bookServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *bookServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) SearchBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (BookService_SearchBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[1], BookService_SearchBook_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceSearchBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_SearchBookClient interface {
	Recv() (*BookResponse, error)
	grpc.ClientStream
}

type bookServiceSearchBookClient struct {
	grpc.ClientStream
}

func (x *bookServiceSearchBookClient) Recv() (*BookResponse, error) {
	m := new(BookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	CreateNewAuthor(context.Context, *AuthorRequest) (*AuthorResponse, error)
	CreateNewBook(context.Context, *BookRequest) (*BookResponse, error)
	UploadImage(BookService_UploadImageServer) error
	SearchBook(*BookRequest, BookService_SearchBookServer) error
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) CreateNewAuthor(context.Context, *AuthorRequest) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAuthor not implemented")
}
func (UnimplementedBookServiceServer) CreateNewBook(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewBook not implemented")
}
func (UnimplementedBookServiceServer) UploadImage(BookService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedBookServiceServer) SearchBook(*BookRequest, BookService_SearchBookServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateNewAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateNewAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateNewAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateNewAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateNewBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateNewBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateNewBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateNewBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).UploadImage(&bookServiceUploadImageServer{stream})
}

type BookService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type bookServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *bookServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BookService_SearchBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).SearchBook(m, &bookServiceSearchBookServer{stream})
}

type BookService_SearchBookServer interface {
	Send(*BookResponse) error
	grpc.ServerStream
}

type bookServiceSearchBookServer struct {
	grpc.ServerStream
}

func (x *bookServiceSearchBookServer) Send(m *BookResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.pb.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewAuthor",
			Handler:    _BookService_CreateNewAuthor_Handler,
		},
		{
			MethodName: "CreateNewBook",
			Handler:    _BookService_CreateNewBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _BookService_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SearchBook",
			Handler:       _BookService_SearchBook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "book_service.proto",
}
